name: Test Api

on: [push, pull_request]

defaults:
  run:
    shell: bash
    working-directory: api

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HUSKY: 0

jobs:
  scan:
    name: Gitleaks scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint-node-project:
    runs-on: ubuntu-latest
    name: Lint
    needs: scan
    steps:
    - name: Checkout project source
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10
    - name: Install dependencies
      run: pnpm install
    - name: Run lint
      run: pnpm lint
    - name: Run format check
      run: pnpm typecheck

  build-and-tests-api:
    runs-on: ubuntu-latest
    name: Build and Test API
    needs: lint-node-project
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: backend-test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis
        env:
          REDIS_PASSWORD: password
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout project source
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Enable corepack
        run: corepack enable

      - name: Set pnpm store directory
        run: pnpm config set store-dir .pnpm-store

      - name: Export environment variables from .env.test
        run: |
          set -a
          [ -f .env.test ] && . .env.test
          set +a

      - name: Set REDIS_HOST, DB_HOST, HOST
        run: |
          echo "REDIS_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "HOST=$(hostname)" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

  build:
    name: Build and push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=sha,enable=true

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          
      - name: Download Trivy
        run: curl https://raw.githubusercontent.com/aquasecurity/trivy/7735ec432a83d5446d13a593ab3b27dd02649ca1/contrib/markdown.tpl -o markdown.tpl

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ fromJson(steps.meta.outputs.json).tags[0] }}
          format: 'template'
          template: '@api/markdown.tpl'
          output: ./api/trivy.md
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Add Trivy report to summary
        if: always()
        run: cat trivy.md && cat trivy.md >> $GITHUB_STEP_SUMMARY